/**
 * RequestConfig and ResponseConfig are interfaces that must be respected for clients generated by the Kubb CLI.
 * This interface should not be modified.
 */
export type RequestConfig<TData = unknown> = {
  baseURL?: string;
  url?: string;
  method: 'get' | 'put' | 'patch' | 'post' | 'delete' | 'options';
  params?: unknown;
  data?: TData | FormData;
  responseType?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';
  signal?: AbortSignal;
  headers?: [string, string][] | Record<string, string>;
};

export type ResponseConfig<TData = unknown> = {
  data: TData;
  status: number;
  statusText: string;
  headers?: [string, string][] | Record<string, string>;
};

export const fetchClient = async <TData, _TError = unknown, TVariables = unknown>(
  config: RequestConfig<TVariables>,
): Promise<ResponseConfig<TData>> => {
  const response = await fetch([config.baseURL, config.url].filter(Boolean).join(''), {
    method: config.method.toUpperCase(),
    body: JSON.stringify(config.data),
    signal: config.signal,
    headers: config.headers,
  });

  const data = (await response.json()) as TData;

  return {
    data,
    status: response.status,
    statusText: response.statusText,
  };
};

fetchClient.getConfig = () => {
  throw new Error('Not supported');
};

fetchClient.setConfig = () => {
  throw new Error('Not supported');
};

export default fetchClient;
